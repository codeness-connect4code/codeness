name: Deploy to AWS EC2

on:
  pull_request:
    branches:
      - develop
    types:
      - closed  # PR이 닫힐 때 실행 (머지 포함)

jobs:
  deploy:
    if: github.event.pull_request.merged == true  # 머지된 경우만 실행
    runs-on: ubuntu-latest  # GitHub Actions가 실행될 환경

    steps:
      # ✅ 1️⃣ GitHub 저장소 코드 가져오기
      - name: Checkout Repository
        uses: actions/checkout@v2

      # ✅ 2️⃣ JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # ✅ 3️⃣ Gradle을 사용해 Spring Boot 애플리케이션 빌드
      - name: Build JAR file
        run: |
          chmod +x gradlew
          ./gradlew build -x test  # JAR 파일 빌드 (테스트 제외)

      # ✅ 4️⃣ Docker 로그인 (GitHub Secrets 사용)
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # ✅ 5️⃣ Docker 이미지 빌드 & 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-backend .
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-backend:latest ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend:latest

      # ✅ 6️⃣ EC2에 SSH 접속 후 배포 (최신 Docker 이미지로 컨테이너 실행)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
            docker stop backend-container || true
            docker rm backend-container || true
            docker run -d -p 3000:3000 --env-file .env --name backend-container ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
