name: Deploy to AWS EC2

on:
  push:
    branches:
      - feature/deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ GitHub 저장소 코드 가져오기
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2️⃣ JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3️⃣ Gradle 빌드 (Spring Boot JAR 파일 생성, 테스트 제외)
      - name: Build JAR file
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      # 4️⃣ Docker 로그인 (GitHub Secrets 사용)
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5️⃣ Docker 이미지 빌드 & 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-backend .
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-backend:latest ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend:latest

      # 6️⃣ EC2에 SSH 접속 후 배포 (최신 Docker 이미지 실행)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 최신 Docker 이미지 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-backend:latest

            # 기존 컨테이너 종료 및 삭제
            docker stop backend-container || true
            docker rm backend-container || true

            # .env 파일을 통해 FIRE_DB_URL, FIRE_PATH 등 환경변수를 전달합니다.
            # Firebase 키 파일은 JAR 내 포함되어 있으므로 별도 마운트 없이 실행합니다.
            docker run -d -p 8080:8080 \
              --env-file /home/ubuntu/codeness/.env \
              --name backend-container ${{ secrets.DOCKER_USERNAME }}/my-backend:latest